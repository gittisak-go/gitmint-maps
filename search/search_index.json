{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u0e22\u0e34\u0e19\u0e14\u0e35\u0e15\u0e49\u0e2d\u0e19\u0e23\u0e31\u0e1a\u0e2a\u0e39\u0e48 Wiki \u0e02\u0e2d\u0e07 GitMint Maps","text":"<p>\u0e19\u0e35\u0e48\u0e04\u0e37\u0e2d\u0e40\u0e2d\u0e01\u0e2a\u0e32\u0e23\u0e2b\u0e25\u0e31\u0e01\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e42\u0e04\u0e23\u0e07\u0e01\u0e32\u0e23 GitMint Maps \u2014 \u0e40\u0e02\u0e35\u0e22\u0e19\u0e40\u0e1b\u0e47\u0e19\u0e20\u0e32\u0e29\u0e32\u0e44\u0e17\u0e22\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e17\u0e35\u0e21\u0e07\u0e32\u0e19\u0e41\u0e25\u0e30\u0e1c\u0e39\u0e49\u0e23\u0e48\u0e27\u0e21\u0e1e\u0e31\u0e12\u0e19\u0e32\u0e40\u0e02\u0e49\u0e32\u0e16\u0e36\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e44\u0e14\u0e49\u0e2a\u0e30\u0e14\u0e27\u0e01</p> <p>\u0e2b\u0e31\u0e27\u0e02\u0e49\u0e2d\u0e2b\u0e25\u0e31\u0e01: - \u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 - \u0e01\u0e32\u0e23\u0e1e\u0e31\u0e12\u0e19\u0e32\u0e41\u0e25\u0e30\u0e01\u0e32\u0e23\u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32\u0e2a\u0e20\u0e32\u0e1e\u0e41\u0e27\u0e14\u0e25\u0e49\u0e2d\u0e21 - \u0e42\u0e04\u0e23\u0e07\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e42\u0e04\u0e49\u0e14 - \u0e01\u0e32\u0e23\u0e1b\u0e0f\u0e34\u0e1a\u0e31\u0e15\u0e34\u0e01\u0e32\u0e23 (deploy / monitoring) - \u0e41\u0e19\u0e27\u0e17\u0e32\u0e07\u0e01\u0e32\u0e23\u0e21\u0e35\u0e2a\u0e48\u0e27\u0e19\u0e23\u0e48\u0e27\u0e21 \u0e41\u0e25\u0e30 changelog</p> <p>\u0e43\u0e0a\u0e49\u0e40\u0e21\u0e19\u0e39\u0e14\u0e49\u0e32\u0e19\u0e1a\u0e19\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e44\u0e1b\u0e22\u0e31\u0e07\u0e2b\u0e31\u0e27\u0e02\u0e49\u0e2d\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23</p>"},{"location":"architecture/","title":"\u0e42\u0e04\u0e23\u0e07\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e42\u0e04\u0e49\u0e14 (Architecture)","text":"<p>\u0e20\u0e32\u0e1e\u0e23\u0e27\u0e21\u0e42\u0e04\u0e23\u0e07\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e42\u0e1f\u0e25\u0e40\u0e14\u0e2d\u0e23\u0e4c\u0e2b\u0e25\u0e31\u0e01\u0e02\u0e2d\u0e07\u0e42\u0e1b\u0e23\u0e40\u0e08\u0e04 (\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07 \u2014 \u0e1b\u0e23\u0e31\u0e1a\u0e15\u0e32\u0e21\u0e08\u0e23\u0e34\u0e07)</p> <ul> <li>src/ \u2014 \u0e42\u0e04\u0e49\u0e14\u0e2b\u0e25\u0e31\u0e01\u0e02\u0e2d\u0e07\u0e41\u0e2d\u0e1b</li> <li>api/ \u2014 \u0e0a\u0e31\u0e49\u0e19 API / route handlers</li> <li>services/ \u2014 \u0e18\u0e38\u0e23\u0e01\u0e34\u0e08\u0e2b\u0e25\u0e31\u0e01\u0e41\u0e25\u0e30 logic</li> <li>models/ \u2014 \u0e42\u0e04\u0e23\u0e07\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 / ORM models</li> <li>assets/ \u2014 \u0e44\u0e1f\u0e25\u0e4c static (\u0e23\u0e39\u0e1b, \u0e41\u0e1c\u0e19\u0e17\u0e35\u0e48, icons)</li> <li>scripts/ \u2014 \u0e2a\u0e04\u0e23\u0e34\u0e1b\u0e15\u0e4c\u0e0a\u0e48\u0e27\u0e22\u0e40\u0e2b\u0e25\u0e37\u0e2d\u0e15\u0e48\u0e32\u0e07 \u0e46</li> <li>docs/ \u2014 \u0e40\u0e2d\u0e01\u0e2a\u0e32\u0e23 (\u0e44\u0e1f\u0e25\u0e4c MkDocs \u0e19\u0e35\u0e49)</li> </ul> <p>\u0e41\u0e19\u0e30\u0e19\u0e33\u0e43\u0e2b\u0e49\u0e40\u0e1e\u0e34\u0e48\u0e21 diagram (Mermaid) \u0e2b\u0e23\u0e37\u0e2d\u0e20\u0e32\u0e1e\u0e2a\u0e16\u0e32\u0e1b\u0e31\u0e15\u0e22\u0e01\u0e23\u0e23\u0e21\u0e17\u0e35\u0e48\u0e2d\u0e18\u0e34\u0e1a\u0e32\u0e22 data flow \u0e41\u0e25\u0e30 integration points</p>"},{"location":"changelog/","title":"\u0e1b\u0e23\u0e30\u0e27\u0e31\u0e15\u0e34\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07 (Changelog)","text":"<ul> <li>v0.1.0 \u2014 YYYY-MM-DD \u2014 \u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19\u0e42\u0e1b\u0e23\u0e40\u0e08\u0e04</li> <li>v0.1.x \u2014 YYYY-MM-DD \u2014 \u0e23\u0e32\u0e22\u0e01\u0e32\u0e23\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07 (\u0e1b\u0e23\u0e31\u0e1a\u0e15\u0e32\u0e21 release)</li> </ul> <p>(\u0e41\u0e19\u0e30\u0e19\u0e33\u0e43\u0e2b\u0e49\u0e2d\u0e31\u0e1b\u0e40\u0e14\u0e15\u0e2b\u0e19\u0e49\u0e32\u0e19\u0e35\u0e49\u0e40\u0e21\u0e37\u0e48\u0e2d\u0e21\u0e35 release \u0e2b\u0e23\u0e37\u0e2d merge \u0e07\u0e32\u0e19\u0e17\u0e35\u0e48\u0e40\u0e1b\u0e47\u0e19 feature/bugfix \u0e2a\u0e33\u0e04\u0e31\u0e0d)</p>"},{"location":"contributing/","title":"\u0e01\u0e32\u0e23\u0e21\u0e35\u0e2a\u0e48\u0e27\u0e19\u0e23\u0e48\u0e27\u0e21 (Contributing)","text":"<p>\u0e02\u0e2d\u0e1a\u0e04\u0e38\u0e13\u0e17\u0e35\u0e48\u0e2a\u0e19\u0e43\u0e08\u0e0a\u0e48\u0e27\u0e22\u0e1e\u0e31\u0e12\u0e19\u0e32\u0e42\u0e1b\u0e23\u0e40\u0e08\u0e04\u0e19\u0e35\u0e49! \u0e42\u0e1b\u0e23\u0e14\u0e1b\u0e0f\u0e34\u0e1a\u0e31\u0e15\u0e34\u0e15\u0e32\u0e21\u0e41\u0e19\u0e27\u0e17\u0e32\u0e07\u0e14\u0e49\u0e32\u0e19\u0e25\u0e48\u0e32\u0e07:</p> <ul> <li>\u0e40\u0e1b\u0e34\u0e14 issue \u0e01\u0e48\u0e2d\u0e19\u0e40\u0e23\u0e34\u0e48\u0e21\u0e17\u0e33 feature \u0e2b\u0e25\u0e31\u0e01\u0e2b\u0e23\u0e37\u0e2d\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07\u0e40\u0e0a\u0e34\u0e07\u0e42\u0e04\u0e23\u0e07\u0e2a\u0e23\u0e49\u0e32\u0e07</li> <li>\u0e15\u0e31\u0e49\u0e07\u0e0a\u0e37\u0e48\u0e2d branch \u0e15\u0e32\u0e21\u0e23\u0e39\u0e1b\u0e41\u0e1a\u0e1a:</li> <li>feature/ <li>fix/ <li>\u0e40\u0e21\u0e37\u0e48\u0e2d\u0e40\u0e2a\u0e23\u0e47\u0e08 \u0e43\u0e2b\u0e49\u0e40\u0e1b\u0e34\u0e14 Pull Request \u0e41\u0e25\u0e30\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e42\u0e22\u0e07\u0e01\u0e31\u0e1a issue \u0e17\u0e35\u0e48\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e02\u0e49\u0e2d\u0e07</li> <li>\u0e23\u0e30\u0e1a\u0e38\u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e01\u0e32\u0e23\u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e43\u0e19 PR \u0e41\u0e25\u0e30\u0e23\u0e31\u0e19\u0e17\u0e31\u0e49\u0e07 unit tests \u0e41\u0e25\u0e30 lint</li> <li>\u0e1b\u0e0f\u0e34\u0e1a\u0e31\u0e15\u0e34\u0e15\u0e32\u0e21 CODE_OF_CONDUCT.md (\u0e16\u0e49\u0e32\u0e21\u0e35)</li> <p>\u0e40\u0e17\u0e21\u0e40\u0e1e\u0e25\u0e15\u0e2a\u0e31\u0e49\u0e19 \u0e46 \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a PR: - \u0e2b\u0e31\u0e27\u0e02\u0e49\u0e2d: - \u0e04\u0e33\u0e2d\u0e18\u0e34\u0e1a\u0e32\u0e22: - \u0e27\u0e34\u0e18\u0e35\u0e17\u0e14\u0e2a\u0e2d\u0e1a: - \u0e2b\u0e21\u0e32\u0e22\u0e40\u0e2b\u0e15\u0e38 (breaking changes, migration steps)</p>"},{"location":"dev-setup/","title":"\u0e01\u0e32\u0e23\u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32\u0e2a\u0e20\u0e32\u0e1e\u0e41\u0e27\u0e14\u0e25\u0e49\u0e2d\u0e21\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e1e\u0e31\u0e12\u0e19\u0e32","text":"<p>\u0e41\u0e19\u0e30\u0e19\u0e33\u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e01\u0e32\u0e23\u0e40\u0e15\u0e23\u0e35\u0e22\u0e21 environment \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e19\u0e31\u0e01\u0e1e\u0e31\u0e12\u0e19\u0e32</p> <ul> <li>\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e21\u0e37\u0e2d\u0e2b\u0e25\u0e31\u0e01:</li> <li>Python 3.11+ (\u0e16\u0e49\u0e32\u0e43\u0e0a\u0e49)</li> <li>Node.js 18+</li> <li>Docker (\u0e16\u0e49\u0e32\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e23\u0e31\u0e19 service \u0e41\u0e1a\u0e1a container)</li> <li>\u0e2a\u0e23\u0e49\u0e32\u0e07 virtual environment (Python):   python -m venv .venv   source .venv/bin/activate   pip install -r requirements.txt</li> <li>\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e1a\u0e48\u0e2d\u0e22:</li> <li>\u0e23\u0e31\u0e19 server (local): npm start \u0e2b\u0e23\u0e37\u0e2d python app.py</li> <li>\u0e23\u0e31\u0e19 unit tests: pytest \u0e2b\u0e23\u0e37\u0e2d npm test</li> <li>\u0e15\u0e23\u0e27\u0e08 static analysis: flake8 / eslint</li> </ul> <p>\u0e04\u0e33\u0e2d\u0e18\u0e34\u0e1a\u0e32\u0e22\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e40\u0e15\u0e34\u0e21\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e01\u0e31\u0e1a local database, API keys, \u0e41\u0e25\u0e30 fixtures \u0e43\u0e2b\u0e49\u0e14\u0e39\u0e44\u0e1f\u0e25\u0e4c config.example \u0e2b\u0e23\u0e37\u0e2d environment.md (\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e15\u0e32\u0e21\u0e17\u0e35\u0e48\u0e42\u0e04\u0e23\u0e07\u0e01\u0e32\u0e23\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23)</p>"},{"location":"get-started/","title":"Get Started","text":"<p>The easiest way to get started is to start with any of the examples in our <code>./examples</code> folder. Each of the examples is a standalone application using a vite development server that you can copy as a starting point.</p> <p>In order for this to work, an API key for the Google Maps JavaScript API is required. For the examples, this key has to be provided via an environment variable <code>GOOGLE_MAPS_API_KEY</code>, for example by putting your key into a file named <code>.env</code> in the directory:</p> .env<pre><code>GOOGLE_MAPS_API_KEY=&lt;your API key here&gt;\n</code></pre> <p>Once that is set up, run <code>npm install</code> followed by <code>npm start</code> to start the development server.</p>"},{"location":"get-started/#installation","title":"Installation","text":"<p>The library can be installed from npm:</p> <p><pre><code>npm install @vis.gl/react-google-maps\n</code></pre> or <pre><code>yarn add @vis.gl/react-google-maps\n</code></pre></p> <p>This module comes with full TypeScript-support out of the box, so no additional module is required for the typings.</p>"},{"location":"get-started/#example","title":"Example","text":"<p>A minimal example to just render a map looks like this:</p> <p>```tsx title=index.jsx import React from 'react'; import {createRoot} from 'react-dom/client'; import {APIProvider, Map} from '@vis.gl/react-google-maps';</p> <p>const App = () =&gt; (     );</p> <p>const root = createRoot(document.querySelector('#app')); root.render(     ); ```</p>"},{"location":"getting-started/","title":"\u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 (Quick start)","text":"<p>\u0e04\u0e33\u0e2d\u0e18\u0e34\u0e1a\u0e32\u0e22\u0e2a\u0e31\u0e49\u0e19 \u0e46 \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e23\u0e31\u0e19\u0e42\u0e1b\u0e23\u0e40\u0e08\u0e04\u0e1a\u0e19\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e02\u0e2d\u0e07\u0e04\u0e38\u0e13</p> <ol> <li>Clone repository:    git clone https://github.com/gittisak-go/gitmint-maps.git</li> <li>\u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e17\u0e35\u0e48\u0e42\u0e1f\u0e25\u0e40\u0e14\u0e2d\u0e23\u0e4c\u0e42\u0e1b\u0e23\u0e40\u0e08\u0e04:    cd gitmint-maps</li> <li>\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07 dependencies (\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07 Python / Node \u2014 \u0e1b\u0e23\u0e31\u0e1a\u0e15\u0e32\u0e21\u0e08\u0e23\u0e34\u0e07):</li> <li>Python:      python -m venv .venv      source .venv/bin/activate      pip install -r requirements.txt</li> <li>Node:      npm install</li> <li>\u0e23\u0e31\u0e19\u0e41\u0e2d\u0e1b (\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07):</li> <li>Python: python app.py</li> <li>Node: npm start</li> </ol> <p>\u0e2a\u0e48\u0e27\u0e19\u0e02\u0e2d\u0e07 environment variables, \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07 config, \u0e41\u0e25\u0e30\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e2b\u0e19\u0e49\u0e32 \"\u0e01\u0e32\u0e23\u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32\u0e2a\u0e20\u0e32\u0e1e\u0e41\u0e27\u0e14\u0e25\u0e49\u0e2d\u0e21\"</p>"},{"location":"ops/","title":"\u0e01\u0e32\u0e23\u0e1b\u0e0f\u0e34\u0e1a\u0e31\u0e15\u0e34\u0e01\u0e32\u0e23 (Operations)","text":"<p>\u0e41\u0e19\u0e27\u0e17\u0e32\u0e07\u0e01\u0e32\u0e23 deploy \u0e41\u0e25\u0e30\u0e01\u0e32\u0e23\u0e14\u0e39\u0e41\u0e25\u0e23\u0e30\u0e1a\u0e1a\u0e2a\u0e31\u0e49\u0e19 \u0e46</p> <ul> <li>Deployment:</li> <li>\u0e43\u0e0a\u0e49 Docker / Kubernetes (\u0e16\u0e49\u0e32\u0e21\u0e35)</li> <li>\u0e21\u0e35 pipeline \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a build image \u0e41\u0e25\u0e30 deploy (CI/CD)</li> <li>Monitoring:</li> <li>\u0e41\u0e19\u0e30\u0e19\u0e33 metrics \u0e41\u0e25\u0e30 alert \u0e17\u0e35\u0e48\u0e2a\u0e33\u0e04\u0e31\u0e0d (latency, error rate)</li> <li>Backup:</li> <li>\u0e41\u0e19\u0e27\u0e17\u0e32\u0e07 backup \u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e2a\u0e33\u0e04\u0e31\u0e0d\u0e41\u0e25\u0e30\u0e01\u0e32\u0e23\u0e01\u0e39\u0e49\u0e04\u0e37\u0e19</li> </ul> <p>(\u0e1b\u0e23\u0e31\u0e1a\u0e40\u0e19\u0e37\u0e49\u0e2d\u0e2b\u0e32\u0e43\u0e2b\u0e49\u0e40\u0e02\u0e49\u0e32\u0e01\u0e31\u0e1a\u0e2a\u0e20\u0e32\u0e1e\u0e41\u0e27\u0e14\u0e25\u0e49\u0e2d\u0e21 production \u0e02\u0e2d\u0e07\u0e42\u0e04\u0e23\u0e07\u0e01\u0e32\u0e23)</p>"},{"location":"upgrade-guide/","title":"Upgrade Guide","text":""},{"location":"whats-new/","title":"What's new","text":""},{"location":"whats-new/#react-google-maps-v10","title":"react-google-maps v1.0","text":"<p>Initial public version</p>"},{"location":"api-reference/components/advanced-marker/","title":"<code>&lt;AdvancedMarker&gt;</code> Component","text":"<p>A component to add an <code>AdvancedMarkerElement</code> to a map. By default, an AdvancedMarker will appear as a balloon-shaped, red maps-pin at the specified position on the map, but the appearance of the markers can be fully customized.</p> <p>:::info</p> <p>The <code>AdvancedMarker</code> can only be used on maps using cloud-based map styling (i.e. the <code>Map</code>-component has a <code>mapId</code> specified).</p> <p>:::</p>"},{"location":"api-reference/components/advanced-marker/#usage","title":"Usage","text":"<p>By default, the marker will be rendered as the default red balloon pin. This can be customized in two ways: by specifying custom colors, an icon and such via a <code>Pin</code> component, or by creating the complete marker with html/css (images, svg, animations are all supported).</p> <p>For this, the <code>AdvancedMarker</code> component optionally accepts child components that will be rendered instead of the default pin-element on the map, making it possible to create simple labels and infowindows with it.</p> <pre><code>import {AdvancedMarker} from './advanced-marker';\n\n&lt;Map {...mapProps}&gt;\n  {/* red default marker */}\n  &lt;AdvancedMarker position={{lat: 29.5, lng: -81.2}} /&gt;\n\n  {/* customized green marker */}\n  &lt;AdvancedMarker position={{lat: 29.5, lng: -81.2}}&gt;\n    &lt;Pin\n      background={'#0f9d58'}\n      borderColor={'#006425'}\n      glyphColor={'#60d98f'}\n    /&gt;\n  &lt;/AdvancedMarker&gt;\n\n  {/* fully customized marker */}\n  &lt;AdvancedMarker position={{lat: 29.5, lng: -81.2}}&gt;\n    &lt;img src={markerImage} width={32} height={32} /&gt;\n  &lt;/AdvancedMarker&gt;\n&lt;/Map&gt;;\n</code></pre> <p>When anything other than a <code>Pin</code> component is specified for the marker, a div element (the \"content element\") will be created and the children will be rendered into that content element via a portal. The <code>style</code> and <code>className</code> props can be used to configure the styling of this content element.</p> <p>:::tip</p> <p>When custom html is specified, the marker will be positioned such that the <code>position</code> on the map is at the bottom center of the content-element. If you need it positioned differently, you can use the <code>anchorPoint</code> property of the <code>AdvancedMarker</code>. For example, to have the anchor point in the top-left corner of the marker:</p> <pre><code>import {AdvancedMarker, AdvancedMarkerAnchorPoint} from '@vis.gl/react-google-maps';\n\n&lt;AdvancedMarker position={...} anchorPoint={AdvancedMarkerAnchorPoint.TOP_LEFT}&gt;\n    ...\n&lt;/AdvancedMarker&gt;\n</code></pre> <p>:::</p>"},{"location":"api-reference/components/advanced-marker/#props","title":"Props","text":"<p>The <code>AdvancedMarker</code> component supports most of the options in <code>google.maps.marker.AdvancedMarkerElementOptions</code> as props, as well as a couple of others that are specific to React.</p>"},{"location":"api-reference/components/advanced-marker/#required","title":"Required","text":"<p>There are no strictly required props for the AdvancedMarker component, but \u2013 for obvious reasons \u2013 the position has to be set for the marker to be shown on the map.</p>"},{"location":"api-reference/components/advanced-marker/#content-props","title":"Content Props","text":""},{"location":"api-reference/components/advanced-marker/#classname-string","title":"<code>className</code>: string","text":"<p>A className to be added to the markers content-element. The content-element is either an element that contains the custom HTML content or the DOM representation of the <code>google.maps.marker.PinElement</code> when a Pin or an empty AdvancedMarker component is rendered.</p>"},{"location":"api-reference/components/advanced-marker/#style-cssproperties","title":"<code>style</code>: CSSProperties","text":"<p>Additional style-rules to apply to the content-element. Since the content-element isn't created when using the default-pin, this option is only available when using custom HTML markers.</p>"},{"location":"api-reference/components/advanced-marker/#title-string","title":"<code>title</code>: string","text":"<p>The title of the marker. If provided, an accessibility text (e.g. for use with screen readers) will be added to the AdvancedMarkerElement with the provided value.</p>"},{"location":"api-reference/components/advanced-marker/#positioning-props","title":"Positioning Props","text":""},{"location":"api-reference/components/advanced-marker/#position-googlemapslatlngliteral-googlemapslatlngaltitudeliteral","title":"<code>position</code>: google.maps.LatLngLiteral | google.maps.LatLngAltitudeLiteral","text":"<p>The position of the marker. For maps with tilt enabled, an <code>AdvancedMarker</code> can also be placed at an altitude using the <code>{lat: number, lng: number, altitude: number}</code> format.</p>"},{"location":"api-reference/components/advanced-marker/#zindex-number","title":"<code>zIndex</code>: number","text":"<p>All markers are displayed on the map in order of their zIndex, with higher values in front of lower values.</p> <p>By default, <code>AdvancedMarker</code>s are displayed according to their vertical position on screen, with lower AdvancedMarkerElements appearing in front of AdvancedMarkerElements farther up the screen.</p> <p>:::note</p> <p>The <code>zIndex</code> is also used to help determine relative priority between multiple markers when using collision behavior <code>CollisionBehavior.OPTIONAL_AND_HIDES_LOWER_PRIORITY</code>. A higher <code>zIndex</code> value indicates higher priority.</p> <p>:::</p>"},{"location":"api-reference/components/advanced-marker/#collisionbehavior-collisionbehavior","title":"<code>collisionBehavior</code>: CollisionBehavior","text":"<p>Defines how the marker behaves when it collides with another marker or with the basemap labels on a vector map. Specified as one of the <code>CollisionBehaviour</code> constants.</p> <p>Collision between multiple markers works on both raster and vector maps; however, hiding labels and default-markers of the base map to make room for the markers will only work on vector maps.</p> <p>:::note</p> <p>You should always import the <code>CollisionBehavior</code> enum from the <code>@vis.gl/react-google-maps</code> package instead of using the <code>google.maps.CollisionBehavior</code> constants. This will help avoid problems with using the constants before the maps API has finished loading.</p> <pre><code>import {AdvancedMarker, CollisionBehavior} from '@vis.gl/react-google-maps';\n\n// ...\n\n&lt;AdvancedMarker\n  collisionBehavior={CollisionBehavior.REQUIRED_AND_HIDES_OPTIONAL}&gt;\n  ...\n&lt;/AdvancedMarker&gt;;\n</code></pre> <p>:::</p> <p>See the documentation on Marker Collision Management for more information.</p>"},{"location":"api-reference/components/advanced-marker/#anchorpoint-advancedmarkeranchorpoint-string-string","title":"<code>anchorPoint</code>: AdvancedMarkerAnchorPoint | [string, string]","text":"<p>Defines the point on the marker which should align with the geo position of the marker. The default anchor point is <code>BOTTOM_CENTER</code>. That means for a standard map marker, the bottom of the pin is on the exact geo location of the marker</p> <p>Either use one of the predefined anchor points from the <code>AdvancedMarkerAnchorPoint</code> export or provide a string tuple in the form of <code>[\"xPosition\", \"yPosition\"]</code>.</p> <p>The position is measured from the top-left corner and can be anything that can be consumed by a CSS translate() function. For example in percent <code>[10%, 90%]</code> or in pixels <code>[10px, 20px]</code>.</p>"},{"location":"api-reference/components/advanced-marker/#other-props","title":"Other Props","text":""},{"location":"api-reference/components/advanced-marker/#clickable-boolean","title":"<code>clickable</code>: boolean","text":"<p>Controls if the marker should be clickable. If true, the marker will be clickable and will be interactive for accessibility purposes (e.g., allowing keyboard navigation via arrow keys).</p> <p>By default, this will automatically be set to true when the <code>onClick</code> prop is specified.</p>"},{"location":"api-reference/components/advanced-marker/#draggable-boolean","title":"<code>draggable</code>: boolean","text":"<p>Controls if the marker can be repositioned by dragging.</p> <p>By default, this will be set to true if any of the corresponding event-handlers (<code>onDragStart</code>, <code>onDrag</code>, <code>onDragEnd</code>) are specified.</p> <p>:::note</p> <p>Dragging is only available in 2D. Markers that have an altitude specified in the position can't be dragged.</p> <p>:::</p>"},{"location":"api-reference/components/advanced-marker/#events","title":"Events","text":""},{"location":"api-reference/components/advanced-marker/#onclick-e-googlemapsmarkeradvancedmarkerclickevent-void","title":"<code>onClick</code>: (e: google.maps.marker.AdvancedMarkerClickEvent) =&gt; void","text":"<p>This event is fired when the marker is clicked.</p>"},{"location":"api-reference/components/advanced-marker/#onmouseenter-e-googlemapsmapmouseeventdomevent-void","title":"<code>onMouseEnter</code>: (e: google.maps.MapMouseEvent['domEvent']) =&gt; void","text":"<p>This event is fired when the mouse enters the marker.</p>"},{"location":"api-reference/components/advanced-marker/#onmouseleave-e-googlemapsmapmouseeventdomevent-void","title":"<code>onMouseLeave</code>: (e: google.maps.MapMouseEvent['domEvent']) =&gt; void","text":"<p>This event is fired when the mouse leaves the marker.</p>"},{"location":"api-reference/components/advanced-marker/#ondragstart-e-googlemapsmapmouseevent-void","title":"<code>onDragStart</code>: (e: google.maps.MapMouseEvent) =&gt; void","text":"<p>This event is fired when the user starts dragging the marker.</p>"},{"location":"api-reference/components/advanced-marker/#ondrag-e-googlemapsmapmouseevent-void","title":"<code>onDrag</code>: (e: google.maps.MapMouseEvent) =&gt; void","text":"<p>This event is repeatedly fired while the user drags the marker.</p>"},{"location":"api-reference/components/advanced-marker/#ondragend-e-googlemapsmapmouseevent-void","title":"<code>onDragEnd</code>: (e: google.maps.MapMouseEvent) =&gt; void","text":"<p>This event is fired when the user stops dragging the marker.</p>"},{"location":"api-reference/components/advanced-marker/#context","title":"Context","text":""},{"location":"api-reference/components/advanced-marker/#hooks","title":"Hooks","text":""},{"location":"api-reference/components/advanced-marker/#useadvancedmarkerref","title":"<code>useAdvancedMarkerRef()</code>","text":"<p>A hook that can be used to simplify the connection between a marker and an infowindow. Returns an array containing both a <code>RefCallback</code> that can be passed to the <code>ref</code>-prop of the <code>AdvancedMarker</code> and the value of the ref as state variable to be passed to the anchor prop of the <code>InfoWindow</code>.</p> <pre><code>import {\n  AdvancedMarker,\n  InfoWindow,\n  useAdvancedMarkerRef\n} from '@vis.gl/react-google-maps';\n\nconst MarkerWithInfoWindow = props =&gt; {\n  const [markerRef, marker] = useAdvancedMarkerRef();\n\n  return (\n    &lt;&gt;\n      &lt;AdvancedMarker position={props.position} ref={markerRef} /&gt;\n      &lt;InfoWindow anchor={marker}&gt;Infowindow Content&lt;/InfoWindow&gt;\n    &lt;/&gt;\n  );\n};\n</code></pre>"},{"location":"api-reference/components/advanced-marker/#source","title":"Source","text":"<p><code>./src/components/advanced-marker.tsx</code></p>"},{"location":"api-reference/components/api-provider/","title":"<code>&lt;APIProvider&gt;</code> Component","text":"<p>The <code>APIProvider</code> is our component to load the Google Maps JavaScript API. Besides that, it provides context information and functions for the other components and hooks of this library.</p> <p>It can be added at any level of the application (typically somewhere at the top of your component-tree), and it will render all child components unmodified. A re-render is only triggered once the loading status of the Maps JavaScript API changes.</p> <p>Normally, there should only be a single instance of the APIProvider in a page, but there are situations (e.g., multiple React render-roots in a page) where this isn't possible. In those cases, make sure to create all <code>APIProvider</code> components using the exact same props, since only the first one to render will actually load the maps API.</p> <p>When the Maps JavaScript API has already been loaded externally (i.e., the <code>google.maps.importLibrary</code> function exists), the <code>APIProvider</code> will ignore all specified props and use the existing <code>importLibrary</code> function.</p> <p>:::info[Important]</p> <p>The Maps JavaScript API can only be loaded once, and settings like the language and region cannot be changed after loading. Therefore, it is important to make sure the props are specified with their final values when the <code>APIProvider</code> component is first rendered. Changing these props after the first render will in most cases have no effect, cause an error, or both.</p> <p>:::</p>"},{"location":"api-reference/components/api-provider/#usage","title":"Usage","text":"<p>The <code>APIProvider</code> only needs the Google Maps Platform API Key to function. This has to be provided via the <code>apiKey</code> prop:</p> <pre><code>import React from 'react';\nimport {APIProvider} from '@vis.gl/react-google-maps';\n\nconst App = () =&gt; (\n  &lt;APIProvider apiKey={'Your API key here'}&gt;\n    {/* ... any components ... */}\n  &lt;/APIProvider&gt;\n);\nexport default App;\n</code></pre>"},{"location":"api-reference/components/api-provider/#props","title":"Props","text":"<p>The props are based on the parameters available for the 'Dynamic Library Import' API which we are using under the hood.</p> <p>:::note</p> <p>Most of the props below are marked with 'first-render only', which refers to the fact that these can only be specified on first render, later changes to the values will have no effect.</p> <p>:::</p>"},{"location":"api-reference/components/api-provider/#required","title":"Required","text":""},{"location":"api-reference/components/api-provider/#apikey-string-required-first-render-only-apikey","title":"<code>apiKey</code>: string (required, first-render only) {#apiKey}","text":"<p>The API Key for the Maps JavaScript API.</p>"},{"location":"api-reference/components/api-provider/#optional","title":"Optional","text":""},{"location":"api-reference/components/api-provider/#version-string-first-render-only-version","title":"<code>version</code>: string (first-render only) {#version}","text":"<p>The version to load (defaults to <code>weekly</code>).</p>"},{"location":"api-reference/components/api-provider/#region-string-first-render-only-region","title":"<code>region</code>: string (first-render only) {#region}","text":"<p>The region code to use. This alters the map's behavior based on a given country or territory. Quoting the official docs:</p> <p>As the developer of a Maps JavaScript API application, you are encouraged to always set a region parameter as various services (such as Places Autocomplete) tend to provide better results when the region is set.</p> <p>It is also your responsibility to ensure that your application complies with local laws by ensuring that the correct region localization is applied for the country in which the application is hosted.</p>"},{"location":"api-reference/components/api-provider/#language-string-first-render-only-language","title":"<code>language</code>: string (first-render only) {#language}","text":"<p>The language to use. This affects all text-content on the map, and the responses to service requests. The default value is determined per user based on HTTP-headers sent by the Browser.</p>"},{"location":"api-reference/components/api-provider/#authreferrerpolicy-string-first-render-only-authreferrerpolicy","title":"<code>authReferrerPolicy</code>: string (first-render only) {#authReferrerPolicy}","text":"<p>If your API key is configured for an entire subdomain, you can set <code>authReferrerPolicy: \"origin\"</code> to limit the amount of data sent when authorizing requests from the Maps JavaScript API.</p>"},{"location":"api-reference/components/api-provider/#libraries-string-libraries","title":"<code>libraries</code>: string[] {#libraries}","text":"<p>A list of libraries to load immediately (libraries can also be loaded later with the <code>useMapsLibrary</code> hook).</p>"},{"location":"api-reference/components/api-provider/#channel-number","title":"<code>channel</code>: number","text":"<p>To track usage of Google Maps JavaScript API via numeric channels. The only acceptable channel values are numbers from 0-999. Read more in the documentation.</p>"},{"location":"api-reference/components/api-provider/#solutionchannel-string","title":"<code>solutionChannel</code>: string","text":"<p>To help Google to better understand types of usage of the Google Maps JavaScript API, the query parameter <code>solution_channel</code> can be set when loading the API.</p> <p>The <code>@vis.gl/react-google-maps</code> library will by default set this to a generic value unique to this library (<code>GMP_VISGL_react</code>). You may opt out at any time by setting this prop to an empty string. Read more in the documentation.</p>"},{"location":"api-reference/components/api-provider/#events","title":"Events","text":""},{"location":"api-reference/components/api-provider/#onload-void-onload","title":"<code>onLoad</code>: () =&gt; void {#onLoad}","text":"<p>a callback that is called once the Maps JavaScript API finished loading.</p>"},{"location":"api-reference/components/api-provider/#onerror-error-unknown-void-onerror","title":"<code>onError</code>: (error: unknown) =&gt; void {#onError}","text":"<p>a callback that is called if there is an error loading the Google Maps JavaScript API.</p>"},{"location":"api-reference/components/api-provider/#context","title":"Context","text":"<p>The APIProvider creates a context value <code>APIProviderContext</code> to be used by the hooks and components in this library. The context contains functions and data needed to register and retrieve map-instances, libraries and the loading-status.</p> <p>:::note</p> <p>Client code should never need to interact with the context directly, always use the corresponding hooks instead. If you feel like you need to directly access the context, please file a bug report or feature request about this.</p> <p>:::</p>"},{"location":"api-reference/components/api-provider/#hooks","title":"Hooks","text":"<p>The following hooks are built to work with the <code>APIProvider</code> Component:</p> <ul> <li><code>useApiIsLoaded()</code> and <code>useApiLoadingState()</code> to check the current loading state of the API.</li> <li><code>useMapsLibrary()</code> to load additional Maps Libraries.</li> </ul>"},{"location":"api-reference/components/api-provider/#source","title":"Source","text":"<p><code>src/components/api-provider.tsx</code>.</p>"},{"location":"api-reference/components/info-window/","title":"<code>&lt;InfoWindow&gt;</code> Component","text":"<p>InfoWindows are small, temporary overlays on the map that are typically used to display additional bits of information for locations on the map \u2013 for example, to add a label or image to a marker. They can be freely positioned on the map, or they can be \"anchored\" to a marker.</p> <p>Any JSX element added to the InfoWindow component as children will get rendered into the content area of the InfoWindow.</p> <p>When an <code>InfoWindow</code> is shown, the map will make sure to reposition the viewport such that the InfoWindow is well visible within the map container (this can be controlled using the <code>disableAutoPan</code> prop).</p> <p>InfoWindows always use the same well-known styling and are limited in how much their look and feel can be customized.</p> <p>:::note</p> <p>By default, the rendered InfoWindow includes a close-button that can't be controlled via the Maps JavaScript API. There are also situations where the map itself will close the InfoWindow (for example, when the InfoWindows anchor is removed). This means that the application doesn't always have full control over the visibility of the InfoWindow.</p> <p>To keep your state in sync with the map, you have to provide a listener for the <code>onClose</code> event so the application knows when then InfoWindow was closed by the map or the user.</p> <p>:::</p> <p>:::tip</p> <p>If you need more control over an InfoWindow than can be offered by the <code>InfoWindow</code> component, you can use the <code>AdvancedMarker</code> component with html-content to create a custom implementation.</p> <p>:::</p>"},{"location":"api-reference/components/info-window/#usage","title":"Usage","text":""},{"location":"api-reference/components/info-window/#minimal-example","title":"Minimal Example","text":"<p>In this example, the InfoWindow will be initially shown when the map is rendered, but the user can close it and there wouldn't be a way to get it back.</p> <pre><code>const MapWithInfoWindow = () =&gt; {\n  return (\n    &lt;Map {...mapProps}&gt;\n      &lt;InfoWindow position={infoWindowPosition}&gt;\n        The content of the info window is here.\n      &lt;/InfoWindow&gt;\n    &lt;/Map&gt;\n  );\n};\n</code></pre>"},{"location":"api-reference/components/info-window/#infowindow-attached-to-marker","title":"Infowindow Attached to Marker","text":"<p>A more typical use-case is to have an InfoWindow shown on click for a marker. One way to implement this is to write a custom component <code>MarkerWithInfoWindow</code> that can then be added to any <code>Map</code>.</p> <pre><code>const MarkerWithInfoWindow = ({position}) =&gt; {\n  // `markerRef` and `marker` are needed to establish the connection between\n  // the marker and infowindow (if you're using the Marker component, you\n  // can use the `useMarkerRef` hook instead).\n  const [markerRef, marker] = useAdvancedMarkerRef();\n\n  const [infoWindowShown, setInfoWindowShown] = useState(false);\n\n  // clicking the marker will toggle the infowindow\n  const handleMarkerClick = useCallback(\n    () =&gt; setInfoWindowShown(isShown =&gt; !isShown),\n    []\n  );\n\n  // if the maps api closes the infowindow, we have to synchronize our state\n  const handleClose = useCallback(() =&gt; setInfoWindowShown(false), []);\n\n  return (\n    &lt;&gt;\n      &lt;AdvancedMarker\n        ref={markerRef}\n        position={position}\n        onClick={handleMarkerClick}\n      /&gt;\n\n      {infoWindowShown &amp;&amp; (\n        &lt;InfoWindow anchor={marker} onClose={handleClose}&gt;\n          &lt;h2&gt;InfoWindow content!&lt;/h2&gt;\n          &lt;p&gt;Some arbitrary html to be rendered into the InfoWindow.&lt;/p&gt;\n        &lt;/InfoWindow&gt;\n      )}\n    &lt;/&gt;\n  );\n};\n</code></pre>"},{"location":"api-reference/components/info-window/#props","title":"Props","text":"<p>The InfoWindowProps interface roughly extends the <code>google.maps.InfoWindowOptions</code> interface and includes all the options available for a InfoWindow as props. All supported options are listed below.</p>"},{"location":"api-reference/components/info-window/#required","title":"Required","text":"<p>There are no strictly required props for the InfoWindow component, but it is required to set either a <code>position</code> or an <code>anchor</code> to show the infowindow.</p>"},{"location":"api-reference/components/info-window/#general-props","title":"General Props","text":""},{"location":"api-reference/components/info-window/#position-googlemapslatlngliteral","title":"<code>position</code>: google.maps.LatLngLiteral","text":"<p>The LatLng at which to display this InfoWindow.</p> <p>:::note</p> <p>When an <code>anchor</code> is specified, the <code>position</code> prop will be ignored.</p> <p>:::</p>"},{"location":"api-reference/components/info-window/#anchor-googlemapsmarker-googlemapsmarkeradvancedmarkerelement","title":"<code>anchor</code>: google.maps.Marker | google.maps.marker.AdvancedMarkerElement","text":"<p>A Marker or AdvancedMarker instance to be used as an anchor. If specified, the InfoWindow will be positioned at the top-center of the anchor. References to the Marker / AdvancedMarkerElement objects needed can be obtained using the  <code>ref</code> property of the <code>Marker</code> and <code>AdvancedMarker</code> components (see example  above). </p>"},{"location":"api-reference/components/info-window/#zindex-number","title":"<code>zIndex</code>: number","text":"<p>All InfoWindows are displayed on the map in order of their zIndex, with higher values displayed in front of InfoWindows with lower values. By default, InfoWindows are displayed according to their latitude, with InfoWindows of lower latitudes appearing in front of InfoWindows at higher latitudes. InfoWindows are always displayed in front of markers.</p>"},{"location":"api-reference/components/info-window/#pixeloffset-number-number","title":"<code>pixelOffset</code>: [number, number]","text":"<p>The offset, in pixels, from the tip of the info window to the point on the map at whose geographical coordinates the info window is anchored. If an InfoWindow is opened with an anchor, the <code>pixelOffset</code> will be calculated from the anchor's top/center.</p>"},{"location":"api-reference/components/info-window/#disableautopan-boolean","title":"<code>disableAutoPan</code>: boolean","text":"<p>Disable panning the map to make the InfoWindow fully visible when it opens.</p>"},{"location":"api-reference/components/info-window/#shouldfocus-boolean","title":"<code>shouldFocus</code>: boolean","text":"<p>Whether focus should be moved inside the InfoWindow when it is opened. When this property isn't set, a heuristic is used to decide whether focus should be moved.</p> <p>It is recommended to explicitly set this property to fit your needs as the heuristic is subject to change and may not work well for all use cases.</p>"},{"location":"api-reference/components/info-window/#content-props","title":"Content Props","text":""},{"location":"api-reference/components/info-window/#classname-string","title":"<code>className</code>: string","text":"<p>A className to be assigned to the topmost element in the infowindow content.</p>"},{"location":"api-reference/components/info-window/#style-cssproperties","title":"<code>style</code>: CSSProperties","text":"<p>A style declaration to be added to the topmost element in the infowindow content. This works exactly as the style property for any other html element.</p>"},{"location":"api-reference/components/info-window/#arialabel-string","title":"<code>ariaLabel</code>: string","text":"<p>AriaLabel to assign to the InfoWindow.</p>"},{"location":"api-reference/components/info-window/#minwidth-number","title":"<code>minWidth</code>: number","text":"<p>Minimum width of the InfoWindow, regardless of the content's width. When using this property, it is strongly recommended to set the minWidth to a value less than the width of the map (in pixels).</p> <p>:::note</p> <p>The <code>minWidth</code> can't be changed while the InfoWindow is open.</p> <p>:::</p>"},{"location":"api-reference/components/info-window/#maxwidth-number","title":"<code>maxWidth</code>: number","text":"<p>Maximum width of the InfoWindow, regardless of content's width.</p> <p>:::note</p> <p>The <code>minWidth</code> can't be changed while the InfoWindow is open.</p> <p>:::</p>"},{"location":"api-reference/components/info-window/#headercontent-string-reactreactnode","title":"<code>headerContent</code>: string | React.ReactNode","text":"<p>The content to display in the InfoWindow header row. This can be any JSX element, or a string that could also contain HTML. When a JSX Element is specified, the <code>headerContent</code> will be rendered to html via a portal, which requires an additional div element to be added as a container.</p> <pre><code>&lt;InfoWindow headerContent={&lt;h3&gt;InfoWindow Header Content&lt;/h3&gt;}&gt;\n  This is the content of the InfoWindow.\n&lt;/InfoWindow&gt;\n</code></pre> <p>:::note</p> <p>This feature is currently only available in the beta channel of the Maps JavaScript API. Set the <code>version</code> prop of your <code>APIProvider</code> to <code>beta</code> to enable it.</p> <p>:::</p>"},{"location":"api-reference/components/info-window/#headerdisabled-boolean","title":"<code>headerDisabled</code>: boolean","text":"<p>Disables the whole header row in the InfoWindow. When set to true, the header will be removed so that the header content and the close button will be hidden.</p> <p>:::note</p> <p>This feature is currently only available in the beta channel of the Maps JavaScript API. Set the <code>version</code> prop of your <code>APIProvider</code> to <code>beta</code> to enable it.</p> <p>:::</p>"},{"location":"api-reference/components/info-window/#events","title":"Events","text":""},{"location":"api-reference/components/info-window/#onclose-void","title":"<code>onClose</code>: () =&gt; void","text":"<p>This event is fired whenever the InfoWindow closes. This could be from unmouting the InfoWindow component, pressing the escape key to close the InfoWindow, or clicking the close button or removing the marker the InfoWindow was anchored to.</p>"},{"location":"api-reference/components/info-window/#oncloseclick-void","title":"<code>onCloseClick</code>: () =&gt; void","text":"<p>This event is fired when the close button was clicked.</p>"},{"location":"api-reference/components/map-control/","title":"<code>&lt;MapControl&gt;</code> Component","text":"<p>The <code>MapControl</code> component can be used to render components into the control-containers of a map instance.</p> <p>The Maps JavaScript API uses a custom layout algorithm for map controls. While you can add your buttons or whatever controls you need on top of the map canvas, that isn't much of an option when you need to mix built-in controls with your own controls. In this case adding your controls to the map is the best option.</p> <p>See the official documentation on this topic.</p>"},{"location":"api-reference/components/map-control/#usage","title":"Usage","text":"<p>You can add as many <code>MapControl</code> components as you like to any <code>Map</code>, multiple controls for the same position are possible as well.</p> <pre><code>import {\n  APIProvider,\n  ControlPosition,\n  Map,\n  MapControl\n} from '@vis.gl/react-google-maps';\n\nconst App = () =&gt; (\n  &lt;APIProvider apiKey={'...'}&gt;\n    &lt;Map {...mapProps}&gt;\n      &lt;MapControl position={ControlPosition.TOP_LEFT}&gt;\n        .. any component here will be added to the control-containers of the\n        google map instance ..\n      &lt;/MapControl&gt;\n    &lt;/Map&gt;\n  &lt;/APIProvider&gt;\n);\n</code></pre>"},{"location":"api-reference/components/map-control/#props","title":"Props","text":""},{"location":"api-reference/components/map-control/#required","title":"Required","text":""},{"location":"api-reference/components/map-control/#position-controlposition","title":"<code>position</code>: ControlPosition","text":"<p>The position is specified as one of the values of the <code>ControlPosition</code> enum, which is an exact copy of the <code>google.maps.ControlPosition</code> type.</p>"},{"location":"api-reference/components/map/","title":"<code>&lt;Map&gt;</code> Component","text":"<p>React component to render a Google map. It can be placed as a child into any other component, but it has to be somewhere inside an <code>&lt;APIProvider&gt;</code> container.</p> <p>The main props to control are the camera parameters \u2013 <code>center</code>, <code>zoom</code>, <code>heading</code> and <code>tilt</code>. At least the center and zoom props have to be specified for the map to be shown.</p> <pre><code>import {APIProvider, Map} from '@vis.gl/react-google-maps';\n\nconst App = () =&gt; (\n  &lt;APIProvider apiKey={process.env.GOOGLE_MAPS_API_KEY}&gt;\n    &lt;Map zoom={10} center={{lat: 53.54992, lng: 10.00678}} /&gt;\n  &lt;/APIProvider&gt;\n);\n</code></pre> <p>:::note</p> <p>By default, the intrinsic height of a Google map is 0. To prevent this from causing confusion, the Map component uses a default-style of <code>width: 100%; height: 100%;</code> for the div-element containing the map, assuming that the parent element will establish a size for the map. If that doesn't work in your case, you can adjust the styling of the map container using the <code>style</code> and <code>className</code> props.</p> <p>:::</p>"},{"location":"api-reference/components/map/#controlled-and-uncontrolled-props","title":"Controlled and Uncontrolled Props","text":"<p>The props controlling the camera parameters for the map (center, zoom, heading and tilt) can all be specified via controlled or uncontrolled values. For example, the center of the map can be specified via either <code>center</code> or <code>defaultCenter</code>. This can even be mixed for the different parameters (for example, only the zoom value is controlled, while others are free).</p> <p>As is the case with React form elements, the default-values will only be applied when the map is first initialized, while the regular parameters will make sure the map stays synchronized with the value specified.</p> <pre><code>const UncontrolledMap = () =&gt; {\n  return &lt;Map defaultCenter={{lat: 40.7, lng: -74}} defaultZoom={12}&gt;&lt;/Map&gt;;\n};\n</code></pre> <p>When only controlled props are used, the map will always exactly reflect the values specified for the camera parameters. When interactions occur, the new camera parameters will be published with a <code>cameraChanged</code> event and the application can use them to update the values passed to the props of the map.</p> <pre><code>import {MapCameraChangedEvent, MapCameraProps} from '@vis.gl/react-google-maps';\n\nconst INITIAL_CAMERA = {\n  center: {lat: 40.7, lng: -74},\n  zoom: 12\n};\n\nconst ControlledMap = () =&gt; {\n  const [cameraProps, setCameraProps] =\n    useState&lt;MapCameraProps&gt;(INITIAL_CAMERA);\n  const handleCameraChange = useCallback((ev: MapCameraChangedEvent) =&gt;\n    setCameraProps(ev.detail)\n  );\n\n  return &lt;Map {...cameraProps} onCameraChanged={handleCameraChange}&gt;&lt;/Map&gt;;\n};\n</code></pre> <p>In addition to this, there is also the externally controlled mode, enabled by the <code>controlled</code> prop. When this mode is active, the map will disable all control inputs and will reject to render anything not specified in the camera props.</p>"},{"location":"api-reference/components/map/#map-instance-caching","title":"Map Instance Caching","text":"<p>If your application renders the map on a subpage or otherwise mounts and unmounts the <code>Map</code> component a lot, this can cause new map instances to be created with every mount of the component. Since the pricing of the Google Maps JavaScript API is based on map-views (effectively calls to the <code>google.maps.Map</code> constructor), this can quickly cause a problem.</p> <p>The <code>Map</code> component can be configured to re-use already created maps with the <code>reuseMaps</code> prop. When enabled, all <code>Map</code> components created with the same <code>mapId</code>, <code>colorScheme</code> and <code>renderingType</code> will reuse previously created instances instead of creating new ones.</p> <p>:::warning</p> <p>In the current version, support for map-caching is still a bit experimental, and there are some known issues when maps are being reused with different sets of options applied. In most simpler situations, like when showing the very same component multiple times, it should work fine.</p> <p>If you experience any problems using this feature, please file a bug-report or start a discussion on GitHub.</p> <p>:::</p>"},{"location":"api-reference/components/map/#props","title":"Props","text":"<p>The <code>MapProps</code> type extends the <code>google.maps.MapOptions</code> interface and includes all possible options available for a Google map as props.</p> <p>The most important of these options are also listed below along with the properties added for the react-library.</p> <p>:::note</p> <p>When specifying the props, the classes provided by the Google Maps API (like <code>google.maps.LatLng</code> or <code>google.maps.LatLngBounds</code>) cannot be used, since the API will only be available after the initial creation of the React components takes place. Instead, the corresponding literal types (<code>google.maps.LatLngLiteral</code> or <code>google.maps.LatLngBoundsLiteral</code>) have to be used.</p> <p>:::</p>"},{"location":"api-reference/components/map/#required","title":"Required","text":"<p>The map doesn't have any strictly required props, but center and zoom-level have to be provided in some way for the map to render. This can be done</p> <ul> <li>by specifying both the <code>center</code> and <code>zoom</code> props,</li> <li>by specifying both the <code>defaultCenter</code> and <code>defaultZoom</code> props,</li> <li>or by specifying the map-region to be shown with the <code>defaultBounds</code> prop.</li> </ul>"},{"location":"api-reference/components/map/#general-props","title":"General Props","text":"<p>:::info</p> <p>The Maps JavaScript API doesn't allow changing the Map ID, the color scheme or the rendering-type of a map after it has been created. This isn't the case for this component. However, the internal <code>google.maps.Map</code> instance has to be recreated when the <code>mapId</code>, <code>colorScheme</code> or <code>renderingType</code> props are changed, which will cause additional cost.</p> <p>See the <code>reuseMaps</code> prop if your application has to dynamically switch between multiple Map IDs, color schemes or rendering types.</p> <p>:::</p>"},{"location":"api-reference/components/map/#id-string","title":"<code>id</code>: string","text":"<p>A string that identifies the map component. This is required when multiple maps are present in the same APIProvider context to be able to access them using the <code>useMap</code> hook.</p>"},{"location":"api-reference/components/map/#mapid-string","title":"<code>mapId</code>: string","text":"<p>The Map ID of the map. This is required if you want to make use of the Cloud-based maps styling.</p>"},{"location":"api-reference/components/map/#colorscheme-googlemapscolorscheme","title":"<code>colorScheme</code>: google.maps.ColorScheme","text":"<p>The color-scheme to be used by the map. Can be <code>'LIGHT'</code>, <code>'DARK'</code>, <code>'FOLLOW_SYSTEM'</code> or one of the <code>ColorScheme</code> constants (<code>import {ColorScheme} from '@vis.gl/react-google-maps';</code>).</p> <p>:::note</p> <p>Custom styles that use Map IDs only apply to the light color scheme for roadmap map types.</p> <p>:::</p>"},{"location":"api-reference/components/map/#renderingtype-googlemapsrenderingtype","title":"<code>renderingType</code>: google.maps.RenderingType","text":"<p>The desired rendering type the renderer should use. Can be <code>'RASTER'</code> or <code>'VECTOR'</code> or one of the <code>RenderingType</code> constants (<code>import {RenderingType} from '@vis.gl/react-google-maps';</code>).</p> <p>If not set, the cloud configuration for the map ID will determine the rendering type (if available). Please note that vector maps may not be available for all devices and browsers, and the map will fall back to a raster map as needed.</p>"},{"location":"api-reference/components/map/#style-reactcssproperties","title":"<code>style</code>: React.CSSProperties","text":"<p>Additional style rules to apply to the map dom-element. By default, this will only contain <code>{width: '100%', height: '100%'}</code>.</p>"},{"location":"api-reference/components/map/#classname-string","title":"<code>className</code>: string","text":"<p>Additional css class-name to apply to the element containing the map. When a classname is specified, the default width and height of the map from the style-prop is no longer applied.</p>"},{"location":"api-reference/components/map/#reusemaps-boolean","title":"<code>reuseMaps</code>: boolean","text":"<p>Enable map-instance caching for this component. When caching is enabled, this component will reuse map instances created with the same <code>mapId</code>, <code>colorScheme</code> and <code>renderingType</code>.</p> <p>See also the section Map Instance Caching above.</p>"},{"location":"api-reference/components/map/#camera-control","title":"Camera Control","text":""},{"location":"api-reference/components/map/#center-googlemapslatlngliteral","title":"<code>center</code>: google.maps.LatLngLiteral","text":"<p>Coordinates for the center of the map.</p>"},{"location":"api-reference/components/map/#zoom-number","title":"<code>zoom</code>: number","text":"<p>The initial resolution at which to display the map. The values range from 0 to 22, the level of detail for different zoom-levels is approximately:</p> <ul> <li><code>1</code>: Entire World</li> <li><code>5</code>: Landmass/continent</li> <li><code>10</code>: City</li> <li><code>15</code>: Streets</li> <li><code>20</code>: Buildings</li> </ul> <p>The Maps JavaScript API Documentation has some more information on this topic.</p>"},{"location":"api-reference/components/map/#heading-number","title":"<code>heading</code>: number","text":"<p>The heading of the map in degrees, measured clockwise from cardinal direction North.</p>"},{"location":"api-reference/components/map/#tilt-number","title":"<code>tilt</code>: number","text":"<p>For vector maps, sets the angle of incidence for the map, in degrees from the viewport plane to the map plane. A value of 0</p> <p>The allowed values are restricted depending on the zoom level of the map:</p> <ul> <li>for zoom-levels below 10, the maximum value is 30,</li> <li>for zoom above 15.5, the maximum value is 67.5</li> <li>between 10 and 15.5, it is a piecewise linear interpolation   (see here for details)</li> </ul>"},{"location":"api-reference/components/map/#defaultcenter-defaultzoom-defaultheading-defaulttilt","title":"<code>defaultCenter</code>, <code>defaultZoom</code>, <code>defaultHeading</code>, <code>defaultTilt</code>","text":"<p>The initial state of the camera. This can be used to leave the map component in uncontrolled mode. When both a default-value and a controlled value are present for a parameter, the controlled value takes precedence.</p>"},{"location":"api-reference/components/map/#defaultbounds-object","title":"<code>defaultBounds</code>: object","text":"<p>An alternative way to specify the region that should initially be visible on the map. Has otherwise the same effect as <code>defaultCenter</code> and <code>defaultZoom</code>.</p> <p>The <code>defaultBounds</code> type is an extension of google.maps.LatLngBoundsLiteral that can also contain the optional property <code>padding</code>: number | google.maps.Padding that represents padding in pixels for the initial view. The bounds will be fit in the part of the map that remains after padding is removed. A number value will yield the same padding on all 4 sides.</p>"},{"location":"api-reference/components/map/#controlled-boolean","title":"<code>controlled</code>: boolean","text":"<p>This Indicates that the map will be controlled externally. Disables all controls provided by the map itself.</p>"},{"location":"api-reference/components/map/#events","title":"Events","text":"<p>The map component supports all events emitted by the <code>google.maps.Map</code> instance in a React-typical way. Here is an example:</p> <pre><code>const MapWithEventHandler = props =&gt; {\n  const handleCameraChange = useCallback((ev: MapCameraChangedEvent) =&gt; {\n    console.log('camera changed: ', ev.detail);\n  });\n\n  return &lt;Map {...props} onCameraChanged={handleCameraChange}&gt;&lt;/Map&gt;;\n};\n</code></pre> <p>See the table below for the full list of events and corresponding prop names.</p> <p>All event callbacks receive a single argument of type <code>MapEvent</code> with the following properties and methods:</p> <ul> <li><code>event.type</code>: string The event type of the event from the Maps JavaScript API.</li> <li><code>event.map</code>: google.maps.Map The map instance that dispatched the event.</li> <li><code>event.stoppable</code>: boolean Indicates if the event can be stopped in   the event-handler. This is only the case for the <code>MapMouseEvent</code> type.</li> <li><code>event.stop()</code>: () =&gt; void for stoppable events, this will cause the   event to stop being processed. Other event-types also have this method,   but it doesn't do anything.</li> <li><code>event.domEvent</code>: MouseEvent | TouchEvent | PointerEvent | KeyboardEvent   | Event For a <code>MapMouseEvent</code> this contains the original DOM event being   handled. For other events, this is undefined.</li> </ul> <p>Based on the specific event, there is also additional information in the <code>event.detail</code> property:</p> <ul> <li><code>MapCameraChangedEvent</code></li> <li><code>center</code>, <code>zoom</code>, <code>heading</code>, <code>tilt</code> the current     camera-parameters of the map</li> <li><code>bounds</code>: google.maps.LatLngBoundsLiteral the currently     visible bounding box</li> <li><code>MapMouseEvent</code> details contain</li> <li><code>latLng</code>: google.maps.LatLngLiteral | null the map coordinates of the     mouse</li> <li><code>placeId</code>: string | null when a place marker on the map is clicked,     this will contain the placeId of the Google Places API for that place.</li> </ul>"},{"location":"api-reference/components/map/#mapping-of-maps-javascript-api-event-names-to-react-props","title":"Mapping of Maps JavaScript API Event names to React props","text":"Google Maps Event React Prop Event Type <code>bounds_changed</code> <code>onBoundsChanged</code> and <code>onCameraChanged</code> <code>MapCameraChangedEvent</code> <code>center_changed</code> <code>onCenterChanged</code> <code>MapCameraChangedEvent</code> <code>zoom_changed</code> <code>onZoomChanged</code> <code>MapCameraChangedEvent</code> <code>heading_changed</code> <code>onHeadingChanged</code> <code>MapCameraChangedEvent</code> <code>tilt_changed</code> <code>onTiltChanged</code> <code>MapCameraChangedEvent</code> <code>click</code> <code>onClick</code> <code>MapMouseEvent</code> <code>contextmenu</code> <code>onContextmenu</code> <code>MapMouseEvent</code> <code>dblclick</code> <code>onDblclick</code> <code>MapMouseEvent</code> <code>mousemove</code> <code>onMousemove</code> <code>MapMouseEvent</code> <code>mouseover</code> <code>onMouseover</code> <code>MapMouseEvent</code> <code>mouseout</code> <code>onMouseout</code> <code>MapMouseEvent</code> <code>drag</code> <code>onDrag</code> <code>MapEvent</code> <code>dragend</code> <code>onDragend</code> <code>MapEvent</code> <code>dragstart</code> <code>onDragstart</code> <code>MapEvent</code> <code>idle</code> <code>onIdle</code> <code>MapEvent</code> <code>projection_changed</code> <code>onProjectionChanged</code> <code>MapEvent</code> <code>isfractionalzoomenabled_changed</code> <code>onIsFractionalZoomEnabledChanged</code> <code>MapEvent</code> <code>mapcapabilities_changed</code> <code>onMapCapabilitiesChanged</code> <code>MapEvent</code> <code>maptypeid_changed</code> <code>onMapTypeIdChanged</code> <code>MapEvent</code> <code>renderingtype_changed</code> <code>onRenderingTypeChanged</code> <code>MapEvent</code> <code>tilesloaded</code> <code>onTilesLoaded</code> <code>MapEvent</code>"},{"location":"api-reference/components/map/#context","title":"Context","text":"<p>The Map creates a context value <code>GoogleMapsContext</code> to be used by the hooks and components in this library, containing a reference to the <code>google.maps.Map</code> instance.</p> <p>:::note</p> <p>Client code should never need to interact with the context directly, always use the corresponding hooks instead. If you feel like you need to directly access the context, please file a bug report about this.</p> <p>:::</p>"},{"location":"api-reference/components/map/#hooks","title":"Hooks","text":"<p>You can use the <code>useMap()</code> hook in other components to get access to the <code>google.maps.Map</code> object rendered in the <code>&lt;Map&gt;</code> component.</p>"},{"location":"api-reference/components/map/#source","title":"Source","text":"<p><code>./src/components/map</code></p>"},{"location":"api-reference/components/marker/","title":"<code>&lt;Marker&gt;</code> Component","text":"<p>React component to display a Marker instance.</p>"},{"location":"api-reference/components/marker/#usage","title":"Usage","text":"<pre><code>import React, {FunctionComponent} from 'react';\nimport {APIProvider, Map, Marker} from '@vis.gl/react-google-maps';\n\nconst App: FunctionComponent&lt;Record&lt;string, unknown&gt;&gt; = () =&gt; (\n  &lt;APIProvider apiKey={'Your API key here'}&gt;\n    &lt;Map zoom={12} center={{lat: 53.54992, lng: 10.00678}}&gt;\n      &lt;Marker position={{lat: 53.54992, lng: 10.00678}} /&gt;\n    &lt;/Map&gt;\n  &lt;/APIProvider&gt;\n);\nexport default App;\n</code></pre>"},{"location":"api-reference/components/marker/#props","title":"Props","text":"<p>The MarkerProps interface extends the google.maps.MarkerOptions interface and includes all possible options available for a Maps JavaScript API Marker. Additionally, it is possible to add different event listeners, e.g. the click event with the <code>onClick</code> property.</p> <pre><code>interface MarkerProps extends google.maps.MarkerOptions {\n  onClick?: (e: google.maps.MapMouseEvent) =&gt; void;\n  onDrag?: (e: google.maps.MapMouseEvent) =&gt; void;\n  onDragStart?: (e: google.maps.MapMouseEvent) =&gt; void;\n  onDragEnd?: (e: google.maps.MapMouseEvent) =&gt; void;\n  onMouseOver?: (e: google.maps.MapMouseEvent) =&gt; void;\n  onMouseOut?: (e: google.maps.MapMouseEvent) =&gt; void;\n}\n</code></pre> <p>To see a Marker on the Map, the <code>position</code> property needs to be set.</p>"},{"location":"api-reference/components/pin/","title":"<code>&lt;Pin&gt;</code> Component","text":"<p>The <code>Pin</code> component can be used to customize the appearance of an <code>AdvancedMarker</code> component.</p>"},{"location":"api-reference/components/pin/#usage","title":"Usage","text":"<pre><code>const CustomizedMarker = () =&gt; (\n  &lt;AdvancedMarker position={{lat: 53.54992, lng: 10.00678}}&gt;\n    &lt;Pin background={'#FBBC04'} glyphColor={'#000'} borderColor={'#000'} /&gt;\n  &lt;/AdvancedMarker&gt;\n);\n</code></pre>"},{"location":"api-reference/components/pin/#props","title":"Props","text":"<p>The <code>PinProps</code> type mirrors the <code>google.maps.PinElementOptions</code> interface and includes all possible options available for a Pin Element instance.</p>"},{"location":"api-reference/components/static-map/","title":"<code>&lt;StaticMap&gt;</code> Component","text":"<p>React component and utility function to create and render Google Static Maps images. This implementation provides both a React component for rendering and a URL generation utility that supports all Google Static Maps API features. The main purpose of the utility function is to enable 'url-signing' in various server environments.</p> <p>:::note</p> <p>Currently, the <code>StaticMap</code> component is just a thin wrapper for a  regular <code>img</code> element. This will likely change in future versions when  additional features are added to static maps.</p> <p>:::</p> <p>The main parameters to control the map are <code>center</code>, <code>zoom</code>, <code>width</code> and <code>height</code>. With a plain map all of these are required for the map to show. There are cases where <code>center</code> and <code>zoom</code> can be omitted and the viewport can be automatically be determined from other data. This is the case when having markers, paths or other <code>visible</code> locations which can form an automatic bounding box for the map view.</p> <p>Parameters that are always required are <code>apiKey</code>, <code>width</code> and <code>height</code>.</p> <pre><code>import {StaticMap, createStaticMapsUrl} from '@vis.gl/react-google-maps';\n\nconst App = () =&gt; {\n  let staticMapsUrl = createStaticMapsUrl({\n    apiKey: 'YOUR API KEY',\n    width: 512,\n    height: 512,\n    center: {lat: 53.555570296010295, lng: 10.008892744638956},\n    zoom: 15\n  });\n\n  // Recommended url-signing when in a server environment.\n  staticMapsUrl = someServerSigningCode(\n    staticMapsUrl,\n    process.env.MAPS_SIGNING_SECRET\n  );\n\n  return &lt;StaticMap url={staticMapsUrl} /&gt;;\n};\n</code></pre> <p>More on URL signing and digital signatures here.</p>"},{"location":"api-reference/components/static-map/#props","title":"Props","text":"<p>The <code>StaticMap</code> component only has one <code>url</code> prop. The recommended way to generate the url is to use the <code>createStaticMapsUrl</code> helper function.</p>"},{"location":"api-reference/components/static-map/#required","title":"Required","text":""},{"location":"api-reference/components/static-map/#url-string","title":"<code>url</code>: string","text":"<p>An url which can be consumed by the Google Maps Static Api.</p>"},{"location":"api-reference/components/static-map/#optional","title":"Optional","text":""},{"location":"api-reference/components/static-map/#classname-string","title":"<code>className</code>: string","text":"<p>A class name that will be attached to the <code>img</code> tag.</p>"},{"location":"api-reference/components/static-map/#createstaticmapsurl-options","title":"<code>createStaticMapsUrl</code> options","text":"<p>:::note</p> <p>Some explanations and syntax migh differ slightly from the official documentation since the Google documentation focuses on building and URL which has been abstracted here in the helper function for better developer experience</p> <p>:::</p> <p>For more details about API options see the get started guide in the Google documentation.</p>"},{"location":"api-reference/components/static-map/#required_1","title":"Required","text":""},{"location":"api-reference/components/static-map/#apikey-string","title":"<code>apiKey</code>: string","text":"<p>The Google Maps Api key.</p>"},{"location":"api-reference/components/static-map/#width-number","title":"<code>width</code>: number","text":"<p>Width of the image. Maps smaller than 180 pixels in width will display a reduced-size Google logo. This parameter is affected by the scale parameter; the final output size is the product of the size and scale values.</p>"},{"location":"api-reference/components/static-map/#height-number","title":"<code>height</code>: number","text":"<p>Height of the image. This parameter is affected by the scale parameter; the final output size is the product of the size and scale values.</p>"},{"location":"api-reference/components/static-map/#optional_1","title":"Optional","text":""},{"location":"api-reference/components/static-map/#center-staticmapslocation","title":"<code>center</code>: StaticMapsLocation","text":"<p>(required if no markers, paths or visible locations are present) Defines the center of the map, equidistant from all edges of the map. This parameter takes a location as either <code>google.maps.LatLngLiteral</code> or a string address (e.g. \"city hall, new york, ny\") identifying a unique location on the face of the earth.</p>"},{"location":"api-reference/components/static-map/#zoom-number","title":"<code>zoom</code>: number","text":"<p>(required if no markers, paths or visible locations are present) Defines the zoom level of the map, which determines the magnification level of the map. This parameter takes a numerical value corresponding to the zoom level of the region desired.</p>"},{"location":"api-reference/components/static-map/#scale-number","title":"<code>scale</code>: number","text":"<p>Affects the number of pixels that are returned. scale=2 returns twice as many pixels as scale=1 while retaining the same coverage area and level of detail (i.e. the contents of the map don't change). This is useful when developing for high-resolution displays. The default value is 1. Accepted values are 1 and 2</p>"},{"location":"api-reference/components/static-map/#format-png-png8-png32-gif-jpg-jpg-baseline","title":"<code>format</code>: 'png' | 'png8' | 'png32' | 'gif' | 'jpg' | 'jpg-baseline'","text":"<p>Defines the format of the resulting image. By default, the Maps Static API creates PNG images. There are several possible formats including GIF, JPEG and PNG types. Which format you use depends on how you intend to present the image. JPEG typically provides greater compression, while GIF and PNG provide greater detail</p>"},{"location":"api-reference/components/static-map/#maptype-googlemapsmaptypeid","title":"<code>mapType</code>: google.maps.MapTypeId","text":"<p>Defines the type of map to construct. There are several possible maptype values, including roadmap, satellite, hybrid, and terrain.</p>"},{"location":"api-reference/components/static-map/#language-string","title":"<code>language</code>: string","text":"<p>Defines the language to use for display of labels on map tiles. Note that this parameter is only supported for some country tiles; if the specific language requested is not supported for the tile set, then the default language for that tileset will be used.</p>"},{"location":"api-reference/components/static-map/#region-string","title":"<code>region</code>: string","text":"<p>Defines the appropriate borders to display, based on geo-political sensitivities. Accepts a region code specified as a two-character ccTLD ('top-level domain') value</p>"},{"location":"api-reference/components/static-map/#mapid-string","title":"<code>mapId</code>: string","text":"<p>Specifies the identifier for a specific map. The Map ID associates a map with a particular style or feature, and must belong to the same project as the API key used to initialize the map.</p>"},{"location":"api-reference/components/static-map/#markers-staticmapsmarker","title":"<code>markers</code>: StaticMapsMarker[]","text":"<p>Defines markers that should be visible on the map.</p>"},{"location":"api-reference/components/static-map/#paths-staticmapspath","title":"<code>paths</code>: StaticMapsPath[]","text":"<p>Defines paths that should be shown on the map.</p>"},{"location":"api-reference/components/static-map/#visible-staticmapslocation","title":"<code>visible</code>: StaticMapsLocation[]","text":"<p>Specifies one or more locations that should remain visible on the map, though no markers or other indicators will be displayed. Use this parameter to ensure that certain features or map locations are shown on the Maps Static API.</p>"},{"location":"api-reference/components/static-map/#style-googlemapsmaptypestyle","title":"<code>style</code>: google.maps.MapTypeStyle[]","text":"<p>Defines a custom style to alter the presentation of a specific feature (roads, parks, and other features) of the map. This parameter takes feature and element arguments identifying the features to style, and a set of style operations to apply to the selected features. See style reference for more information.</p>"},{"location":"api-reference/components/static-map/#digital-signature","title":"Digital Signature","text":"<p>:::warning</p> <p>Please only use URL signing on the server and keep your URL signing secret secure. Do not pass it in any requests, store it on any websites, or post it to any public forum. Anyone obtaining your URL signing secret could spoof requests using your identity.</p> <p>::: It is recommended to use a digital signature with your Static Maps Api requests.</p> <p>Digital signatures are generated using a URL signing secret, which is available on the Google Cloud Console. This secret is essentially a private key, only shared between you and Google, and is unique to your project.</p> <p>The signing process uses an encryption algorithm to combine the URL and your shared secret. The resulting unique signature allows our servers to verify that any site generating requests using your API key is authorized to do so.</p> <ul> <li>Step 1: Get your URL signing secret</li> <li>Step 2: Construct an unsigned request with the <code>createStaticMapUrl</code> helper.</li> <li>Step 3: Generate the signed request | Sample code for URL signing</li> </ul> <p>Google also provides a package <code>@googlemaps/url-signature</code> for URL signing. Another example could look like this. Here in a Next.js environment.</p> <pre><code>import 'server-only';\n\nimport {signUrl} from '@googlemaps/url-signature';\n\nexport function signStaticMapsUrl(url: string, secret: string): string {\n  return signUrl(url, secret).toString();\n}\n</code></pre> <p>When the signing process is setup, you can then limit the unsigned request to prevent abuse of your api key</p>"},{"location":"api-reference/components/static-map/#types","title":"Types","text":""},{"location":"api-reference/components/static-map/#staticmapslocation","title":"StaticMapsLocation","text":"<p>Reference: <code>google.maps.LatLngLiteral</code></p> <pre><code>type StaticMapsLocation = google.maps.LatLngLiteral | string;\n</code></pre>"},{"location":"api-reference/components/static-map/#staticmapsmarker","title":"StaticMapsMarker","text":"<ul> <li>For <code>color</code>, <code>size</code>, <code>label</code> see marker styles.</li> <li>For <code>icon</code>, <code>anchor</code> and <code>scaling</code> see custom icons.</li> </ul> <pre><code>type StaticMapsMarker = {\n  location: google.maps.LatLngLiteral | string;\n  color?: string;\n  size?: 'tiny' | 'mid' | 'small';\n  label?: string;\n  icon?: string;\n  anchor?: string;\n  scale?: 1 | 2 | 4;\n};\n</code></pre>"},{"location":"api-reference/components/static-map/#staticmapspath","title":"StaticMapsPath","text":"<p>For style options see Path styles.</p> <p><code>coordinates</code> can either be an array of locations/addresses or it can be an encoded polyline. Note that the encoded polyline needs an <code>enc:</code> prefix.</p> <pre><code>type StaticMapsPath = {\n  coordinates: Array&lt;google.maps.LatLngLiteral | string&gt; | string;\n  weight?: number;\n  color?: string;\n  fillcolor?: string;\n  geodesic?: boolean;\n};\n</code></pre>"},{"location":"api-reference/components/static-map/#examples","title":"Examples","text":"<p>Usage examples for many of the API options can be found here</p>"},{"location":"api-reference/components/static-map/#source","title":"Source","text":"<p><code>./src/components/static-map</code>\\ <code>./src/libraries/create-static-maps-url/index</code>\\ <code>./src/libraries/create-static-maps-url/types</code></p>"},{"location":"api-reference/hooks/use-api-is-loaded/","title":"<code>useApiIsLoaded</code> Hook","text":"<p>React hook to check if the Maps JavaScript API has finished loading.</p> <pre><code>import {useApiIsLoaded} from '@vis.gl/react-google-maps';\n\nconst MyComponent = () =&gt; {\n  const apiIsLoaded = useApiIsLoaded();\n\n  useEffect(() =&gt; {\n    if (!apiIsLoaded) return;\n\n    // when the maps library is loaded, apiIsLoaded will be true and the API can be\n    // accessed using the global `google.maps` namespace.\n  }, [apiIsLoaded]);\n\n  // ...\n};\n</code></pre>"},{"location":"api-reference/hooks/use-api-is-loaded/#signature","title":"Signature","text":"<p><code>useApiIsLoaded(): boolean</code></p> <p>Returns a boolean indicating if the Maps JavaScript API completed loading.</p>"},{"location":"api-reference/hooks/use-api-is-loaded/#source","title":"Source","text":"<p><code>src/hooks/use-api-is-loaded.ts</code></p>"},{"location":"api-reference/hooks/use-api-loading-status/","title":"<code>useApiLoadingStatus</code> Hook","text":"<p>React hook to get the current status of the API Loader. This can be used to react to loading-errors.</p> <pre><code>import {useApiLoadingStatus, APILoadingStatus} from '@vis.gl/react-google-maps';\n\nconst MyComponent = () =&gt; {\n  const status = useApiLoadingStatus();\n\n  useEffect(() =&gt; {\n    if (status === APILoadingStatus.FAILED) {\n      console.log(':(');\n\n      return;\n    }\n  }, [status]);\n\n  // ...\n};\n</code></pre>"},{"location":"api-reference/hooks/use-api-loading-status/#signature","title":"Signature","text":"<p><code>useApiLoadingStatus(): APILoadingStatus</code></p> <p>Returns the current loading-state.</p>"},{"location":"api-reference/hooks/use-api-loading-status/#source","title":"Source","text":"<p><code>src/hooks/use-api-loading-status.ts</code></p>"},{"location":"api-reference/hooks/use-map/","title":"<code>useMap</code> Hook","text":"<p>The <code>useMap()</code> hook can be used to directly access the <code>google.maps.Map</code> instance created by a <code>Map</code> component within the <code>APIProvider</code> in your application.</p>"},{"location":"api-reference/hooks/use-map/#usage","title":"Usage","text":"<p>When there is only a single map within the <code>APIProvider</code>, the <code>useMap()</code> hook can be called without any arguments and the <code>Map</code> doesn't need an id.</p> <p>The same is true for components that are added as a child to the <code>Map</code> component.</p> <pre><code>const MyComponent = () =&gt; {\n  const map = useMap();\n\n  useEffect(() =&gt; {\n    if (!map) return;\n\n    // do something with the map instance\n  }, [map]);\n\n  return &lt;&gt;...&lt;/&gt;;\n};\n\nconst App = () =&gt; {\n  return (\n    &lt;APIProvider&gt;\n      &lt;Map&gt;&lt;/Map&gt;\n      &lt;MyComponent /&gt;\n    &lt;/APIProvider&gt;\n  );\n};\n</code></pre> <p>When there are multiple <code>Map</code> components in the <code>APIProvider</code>, they are only retrievable using the <code>useMap()</code> hook when the hook is either called from a child-component of a <code>Map</code> or when an explicit id is specified on both the map and as a parameter of the <code>useMap()</code> hook.</p> <pre><code>const MyComponent = () =&gt; {\n  const map = useMap('one-of-my-maps');\n\n  useEffect(() =&gt; {\n    if (!map) return;\n\n    // do something with the map instance\n  }, [map]);\n\n  return &lt;&gt;...&lt;/&gt;;\n};\n\nconst App = () =&gt; {\n  return (\n    &lt;APIProvider&gt;\n      &lt;Map id={'one-of-my-maps'} /&gt;\n      &lt;Map id={'another-map'} /&gt;\n      &lt;MyComponent /&gt;\n    &lt;/APIProvider&gt;\n  );\n};\n</code></pre>"},{"location":"api-reference/hooks/use-map/#signature","title":"Signature","text":"<p><code>useMap(id?: string): google.maps.Map | null</code></p> <p>Returns the <code>google.maps.Map</code> instance or null if it can't be found</p> <p>The returned map instance is determined as follows:</p> <ul> <li>If an <code>id</code> is specified, the map with that <code>id</code> is retrieved from the   <code>APIProviderContext</code>.   If that can't be found, return <code>null</code>.</li> <li>When no <code>id</code> is specified</li> <li>If there is a parent map instance, return it</li> <li>Otherwise, return the map with id <code>default</code> (maps without the <code>id</code> prop     are registered with id <code>default</code>).</li> </ul>"},{"location":"api-reference/hooks/use-map/#parameters","title":"Parameters","text":""},{"location":"api-reference/hooks/use-map/#id-string-optional","title":"<code>id</code>: string (optional)","text":"<p>The id of the map-instance to be returned. If not specified it will return the parent map instance, or the default map instance if there is no parent.</p>"},{"location":"api-reference/hooks/use-map/#source","title":"Source","text":"<p><code>src/hooks/use-map.ts</code></p>"},{"location":"api-reference/hooks/use-maps-library/","title":"<code>useMapsLibrary</code> Hook","text":"<p>React hook to get access to the different Maps JavaScript API libraries. This is essentially a react-version of the <code>google.maps.importLibrary</code> function.</p> <pre><code>const MyComponent = () =&gt; {\n  const map = useMap();\n  const placesLib = useMapsLibrary('places');\n\n  useEffect(() =&gt; {\n    if (!placesLib || !map) return;\n\n    const svc = new placesLib.PlacesService(map);\n    // ...\n  }, [placesLib, map]);\n\n  // ...\n};\n\n// Make sure you have wrapped the component tree with the APIProvider\nconst App = () =&gt; (\n  &lt;APIProvider apiKey={/* ... */}&gt;\n    {/* ... */}\n    &lt;MyComponent /&gt;\n  &lt;/APIProvider&gt;\n);\n</code></pre>"},{"location":"api-reference/hooks/use-maps-library/#signature","title":"Signature","text":"<p><code>useMapsLibrary(name: string): google.maps.XxxLibrary</code></p> <p>Returns the library object as it is returned by <code>google.maps.importLibrary</code>.</p>"},{"location":"api-reference/hooks/use-maps-library/#parameters","title":"Parameters","text":""},{"location":"api-reference/hooks/use-maps-library/#name-string-required","title":"<code>name</code>: string (required)","text":"<p>The name of the library that should be loaded</p>"},{"location":"api-reference/hooks/use-maps-library/#source","title":"Source","text":"<p><code>src/hooks/use-maps-library.ts</code></p>"},{"location":"guides/deckgl-integration/","title":"DeckGL Integration","text":""},{"location":"guides/deckgl-integration/#using-the-map-as-a-child-of-deckgl","title":"Using the <code>Map</code> as a child of <code>DeckGL</code>","text":"<p>To use deck.gl with the <code>Map</code> component wrap the <code>Map</code> component with the DeckGL React component.</p> <p>The following props need to be defined and passed to the DeckGL component:</p> <ul> <li><code>intialViewState</code></li> <li><code>layers</code></li> <li><code>controller</code></li> <li><code>onViewStateChange</code></li> </ul> <p>Make sure that the controller is always set to true and an initial view state is defined. To ensure that deck.gl works well with the Google map, set the <code>limitTiltRange</code> function, which can be imported from <code>@vis.gl/react-gogle-maps</code> library, to <code>onViewStateChange</code>.</p> <pre><code>import {limitTiltRange} from '@vis.gl/react-google-maps';\n\nconst App = () =&gt; (\n  &lt;APIProvider apiKey={'Your API key here'}&gt;\n    &lt;DeckGL\n      initialViewState={INITIAL_VIEW_STATE}\n      layers={layers}\n      controller={true}\n      onViewStateChange={limitTiltRange}&gt;\n      &lt;Map {...GOOGLE_MAPS_MAP_OPTIONS} /&gt;\n    &lt;/DeckGL&gt;\n  &lt;/APIProvider&gt;\n);\n</code></pre>"},{"location":"guides/deckgl-integration/#using-googlemapsoverlay","title":"Using GoogleMapsOverlay","text":"<p>Alternatively, you can also use the <code>GoogleMapsOverlay</code> provided by the <code>@deck.gl/google-maps</code> package to render deck.gl content via Maps API <code>WebGlOverlayView</code>. An example for this can be found in <code>./examples/deckgl-overlay</code>.</p> <p>For this you have to implement your own component and add it to the <code>Map</code> component. A simplified version of this would be:</p> <pre><code>import {useEffect, useMemo} from 'react';\nimport {useMap} from '@vis.gl/react-google-maps';\nimport {GoogleMapsOverlay} from '@deck.gl/google-maps';\n\nexport const DeckGlOverlay = ({layers}) =&gt; {\n  const deck = useMemo(() =&gt; new GoogleMapsOverlay({interleaved: true}), []);\n\n  const map = useMap();\n  useEffect(() =&gt; {\n    deck.setMap(map);\n\n    return () =&gt; deck.setMap(null);\n  }, [map]);\n  useEffect(() =&gt; deck.setProps({layers}), [layers]);\n\n  // no dom rendered by this component\n  return null;\n};\n\nconst App = () =&gt; (\n  &lt;APIProvider apiKey={API_KEY}&gt;\n    &lt;Map {...mapProps}&gt;\n      &lt;DeckGlOverlay layers={deckGlLayers} /&gt;\n    &lt;/Map&gt;\n  &lt;/APIProvider&gt;\n);\n</code></pre>"},{"location":"guides/interacting-with-google-maps-api/","title":"Interacting with the Google Maps JavaScript API","text":"<p>With the provided components, you are able to declaratively create a Google map or a map with markers for example.</p> <p>Besides that, there are three main ways and concepts to interact with the Maps JavaScript API on lower level with this library. You can use the provided hooks, the refs that are available for some components or use the <code>useMapsLibrary</code> hook to tap into other libraries and services of the Maps JavaScript API or craft your own custom hooks.</p>"},{"location":"guides/interacting-with-google-maps-api/#hooks","title":"Hooks","text":"<p>There are several hooks that provide additional functionality for the map or maps you create. The main one being the <code>useMap</code> hook. This hooks give you access to the underlying <code>google.maps.Map</code> instance. Every child component wrapped in the <code>&lt;APIProvider&gt;...&lt;/APIProvider&gt;</code> component has access to the map instance via this hook.</p> <pre><code>import React, {useEffect} from 'react';\nimport {APIProvider, useMap} from '@vis.gl/react-google-maps';\n\nconst MyComponent = () =&gt; {\n  const map = useMap();\n\n  useEffect(() =&gt; {\n    if (!map) return;\n\n    // here you can interact with the imperative maps API\n  }, [map]);\n\n  return &lt;&gt;&lt;/&gt;;\n};\n\nconst App = () =&gt; (\n  &lt;APIProvider apiKey={'YOUR API KEY HERE'}&gt;\n    &lt;Map /* ... */&gt;&lt;/Map&gt;\n\n    &lt;MyComponent /&gt;\n  &lt;/APIProvider&gt;\n);\n</code></pre> <p>The useMapsLibrary hook can be utilized to load other parts of the Maps JavaScript API that are not loaded by default. For example, the Places Service or the Geocoding Service. Learn how to use this hook.</p>"},{"location":"guides/interacting-with-google-maps-api/#refs","title":"Refs","text":"<p>The <code>&lt;Marker&gt;</code> and the <code>&lt;AdvancedMarker&gt;</code> components accept a <code>ref</code> prop which provides access to the underlying <code>google.maps.Marker</code> / <code>google.maps.marker.AdvancedMarkerElement</code> instance.</p> <p>Here is an example of how to use the <code>useMarkerRef</code> hook to get access to a marker instance. The same concept applies for the <code>&lt;AdvancedMarker&gt;</code> (using the <code>useAdvancedMarkerRef</code> hook).</p> <pre><code>import React from 'react';\nimport {\n  APIProvider,\n  Map,\n  Marker,\n  useMarkerRef\n} from '@vis.gl/react-google-maps';\n\nconst App = () =&gt; {\n  const [markerRef, marker] = useMarkerRef();\n\n  useEffect(() =&gt; {\n    if (!marker) {\n      return;\n    }\n\n    // do something with marker instance here\n  }, [marker]);\n\n  return (\n    &lt;APIProvider apiKey={'Your API key here'}&gt;\n      &lt;Map zoom={12} center={{lat: 53.54992, lng: 10.00678}}&gt;\n        &lt;Marker ref={markerRef} position={{lat: 53.54992, lng: 10.00678}} /&gt;\n      &lt;/Map&gt;\n    &lt;/APIProvider&gt;\n  );\n};\n\nexport default App;\n</code></pre>"},{"location":"guides/interacting-with-google-maps-api/#other-maps-javascript-api-libraries-and-services","title":"Other Maps JavaScript API libraries and services","text":"<p>The Maps JavaScript API has a lot of additional libraries for things like geocoding, routing, the Places API, Street View, and a lot more. These libraries are not loaded by default, which is why this module provides a hook <code>useMapsLibrary()</code> to handle dynamic loading of those libraries.</p> <p>For example, if you want to write a component that needs to use the <code>google.maps.places.PlacesService</code> class, you can implement it like this:</p> <pre><code>import {useMapsLibrary} from '@vis.gl/react-google-maps';\n\nconst MyComponent = () =&gt; {\n  const map = useMap();\n\n  // triggers loading the places library and returns the API Object once complete (the\n  // component calling the hook gets automatically re-rendered when this is\n  // the case)\n  const placesLibrary = useMapsLibrary('places');\n\n  const [placesService, setPlacesService] = useState(null);\n\n  useEffect(() =&gt; {\n    if (!placesLibrary || !map) return;\n\n    // when placesLibrary is loaded, the library can be accessed via the\n    // placesLibrary API object\n    setPlacesService(new placesLibrary.PlacesService(map));\n  }, [placesLibrary, map]);\n\n  useEffect(() =&gt; {\n    if (!placesService) return;\n\n    // ...use placesService...\n  }, [placesService]);\n\n  return &lt;&gt;&lt;/&gt;;\n};\n</code></pre> <p>Or you can extract your own hook from this:</p> <pre><code>function usePlacesService() {\n  const map = useMap();\n  const placesLibrary = useMapsLibrary('places');\n  const [placesService, setPlacesService] = useState(null);\n\n  useEffect(() =&gt; {\n    if (!placesLibrary || !map) return;\n\n    setPlacesService(new placesLibrary.PlacesService(map));\n  }, [placesLibrary, map]);\n\n  return placesService;\n}\n\nconst MyComponent = () =&gt; {\n  const placesService = usePlacesService();\n\n  useEffect(() =&gt; {\n    if (!placesService) return;\n\n    // ... use placesService ...\n  }, [placesService]);\n\n  return &lt;&gt;&lt;/&gt;;\n};\n</code></pre>"},{"location":"guides/migrating-from-react-wrapper/","title":"Migrating from <code>@googlemaps/react-wrapper</code>","text":"<p>The <code>@googlemaps/react-wrapper</code> library provides a  minimal wrapper for loading the Maps JavaScript API in a React Application.</p> <p>If you decide to migrate from using <code>@googlemaps/react-wrapper</code> to this library, this can be done seamlessly by using a poyfill for the <code>&lt;Wrapper&gt;</code> component.</p> <p>Roughly speaking, our <code>&lt;APIProvider&gt;</code> component has the same function as the <code>&lt;Wrapper&gt;</code> component provided by <code>@googlemaps/react-wrapper</code>, with one major difference: While the <code>Wrapper</code> component will only render its children once the Google Maps JavaScript API has been loaded, the <code>APIProvider</code> will always render the children and use custom hooks like <code>useApiLoadingStatus()</code> to handle API loading in its components.</p> <p>The following code shows how the <code>Wrapper</code> component can be implemented with this library in a fully compatible way, allowing you to use it as a drop-in-replacement for the <code>@googlemaps/react-wrapper</code> library.</p> <p>A complete example can be found here.</p> wrapper.tsx<pre><code>import React, {\n  FunctionComponent,\n  PropsWithChildren,\n  ReactNode,\n  useEffect\n} from 'react';\n\nimport {\n  APILoadingStatus,\n  APIProvider,\n  APIProviderProps,\n  useApiLoadingStatus\n} from '@vis.gl/react-google-maps';\n\nconst STATUS_MAP = {\n  [APILoadingStatus.LOADING]: 'LOADING',\n  [APILoadingStatus.LOADED]: 'SUCCESS',\n  [APILoadingStatus.FAILED]: 'FAILURE'\n} as const;\n\ntype WrapperProps = PropsWithChildren&lt;\n  {\n    apiKey: string;\n    callback?: (status: string) =&gt; void;\n    render?: (status: string) =&gt; ReactNode;\n  } &amp; APIProviderProps\n&gt;;\n\nexport const Wrapper: FunctionComponent&lt;WrapperProps&gt; = ({\n  apiKey,\n  children,\n  render,\n  callback,\n  ...apiProps\n}) =&gt; {\n  return (\n    &lt;APIProvider apiKey={apiKey} {...apiProps}&gt;\n      &lt;InnerWrapper render={render}&gt;{children}&lt;/InnerWrapper&gt;\n    &lt;/APIProvider&gt;\n  );\n};\n\nconst InnerWrapper = ({\n  callback,\n  render,\n  children\n}: PropsWithChildren&lt;Omit&lt;WrapperProps, 'apiKey'&gt;&gt;) =&gt; {\n  const status = useApiLoadingStatus();\n  const mappedStatus = STATUS_MAP[status] ?? 'LOADING';\n\n  useEffect(() =&gt; {\n    if (callback) callback(mappedStatus);\n  }, [callback, mappedStatus]);\n\n  if (status === APILoadingStatus.LOADED) return children;\n  if (render) return render(mappedStatus);\n\n  return &lt;&gt;&lt;/&gt;;\n};\n</code></pre>"},{"location":"guides/ssr-and-frameworks/","title":"Frameworks and SSR","text":"<p>The main thing to consider when using the library with Server-side Rendering (SSR) or a fullstack framework like Next.js or Remix is to make sure that the map is excluded from Server-side Rendering since that is not supported by the Google Maps API. We are currently evaluating a solution that would provide basic SSR capabilities via the Static Maps API.</p>"},{"location":"guides/ssr-and-frameworks/#nextjs","title":"Next.js","text":"<p>This is how a component in a Next.js (app router) application looks like. Checkout the example code on Github or play around with the demo on Codesandbox.</p> <p>:::note</p> <p>The <code>use client;</code> statement at the top tells Next.js that this component should only be rendered on the client.</p> <p>:::</p> <pre><code>'use client';\n\nimport {APIProvider, Map} from '@vis.gl/react-google-maps';\n\nexport default function MyMap() {\n  return (\n    &lt;div className={styles.container}&gt;\n      &lt;APIProvider apiKey={'...'}&gt;\n        &lt;Map\n          mapId={'bf51a910020fa25a'}\n          defaultZoom={5}\n          defaultCenter={{lat: 53, lng: 10}}\n          gestureHandling={'greedy'}\n          disableDefaultUI={true}\n        /&gt;\n      &lt;/APIProvider&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"guides/ssr-and-frameworks/#remix","title":"Remix","text":"<p>Here is the best approach we found to use a map component in a Remix application. Checkout the example code on Github or play around with the demo on Codesandbox.</p> <p>Wrap the map in a <code>&lt;ClientOnly&gt;</code> component from the <code>remix-utils</code> package for it to be rendered only on the client.</p> <p>:::note</p> <p>If you use a fallback and you know the dimensions of your final map, make sure that the fallback has the same size to prevent layout shifts when the map component loads.</p> <p>:::</p> <pre><code>import {APIProvider, Map} from '@vis.gl/react-google-maps';\nimport {ClientOnly} from 'remix-utils/client-only';\n\nexport default function MyMap() {\n  return (\n    &lt;ClientOnly fallback={&lt;MapFallback /&gt;}&gt;\n      {() =&gt; (\n        &lt;APIProvider apiKey={'...'}&gt;\n          &lt;Map\n            mapId={'bf51a910020fa25a'}\n            defaultZoom={5}\n            defaultCenter={{lat: 53, lng: 10}}\n            gestureHandling={'greedy'}\n            disableDefaultUI={true}\n          /&gt;\n        &lt;/APIProvider&gt;\n      )}\n    &lt;/ClientOnly&gt;\n  );\n}\n</code></pre>"},{"location":"guides/writing-examples/","title":"Writing Examples","text":"<p>The examples for this library serve multiple purposes. First, they should demonstrate the abilities and common patterns for how to achieve things for users of the library and serve as a source of inspiration.</p> <p>At the same time, they should also act as some sort of end-to-end testing stage during development of new features. Validating that all examples are still working should be part of the development process (automated (visual) testing for the examples would be an excellent addition to our workflows).</p> <p>And finally, the examples act as \"incubator\" for new features. Proposed features should be implemented using examples first. That way, the functionality is available to everyone by copying and adjusting the code from the example. If these features prove to be useful and universal enough, they will be considered to be added to the library.</p>"},{"location":"guides/writing-examples/#scope-of-an-example","title":"Scope of an Example","text":"<p>Examples should typically focus on demonstrating a single feature or a set of features in a comprehensive way, and they should reflect what we think are \"ideal ways\" to solve a specific problem.</p> <p>The code should try to avoid or hide clutter and unrelated concepts. For example, if you want to show how different types of marker could be created, functions used to prepare data to show should be hidden away.</p> <p>Examples will typically be read from top to bottom, so consider organizing the code in a way that puts the \"gist\" of the example at the very top of the main source-file.</p> <p>When writing an example for a proposed feature, try to write the code for that feature in a reusable way, such that the relevant components or hooks can easily be copied into another project. This typically means to have components or hooks in their own files with as few dependencies as possible and avoid using bundler-specific features (for example, importing of css files or using environment variables).</p>"},{"location":"guides/writing-examples/#create-the-example","title":"Create the example","text":"<ul> <li>Start off by copying the <code>./examples/_template</code> folder for   your example. This will contain the config-files needed and some   basic setup that is the same for all examples. The new directory-name will be   the \"example id\" and should be in 'kebap-case' (we'll need that id later).</li> <li>Develop the example independently of the library as a standalone   mini-application (using <code>npm install</code> and <code>npm start</code> to start the vite    dev-server).</li> <li>If you install additional dependencies, the \"Examples\" section of the website will not be able to host your example, but you can still link to a CodeSandbox for the example.</li> <li>Edit the title, description and sourcecode links in the   <code>README.md</code>, <code>index.html</code>, and <code>./src/control-panel.tsx</code> files.</li> </ul>"},{"location":"guides/writing-examples/#adding-examples-to-the-website","title":"Adding examples to the website","text":"<p>If you are adding an example with no additional dependencies:</p> <ol> <li>Create the example page in <code>./website/src/examples/your-example-id.mdx</code></li> <li>Add the example to <code>./website/src/examples-sidebar.js</code></li> <li>Create a 400x400 px image for the overview page and place it in    <code>./website/static/images/examples/your-example-id.jpg</code></li> <li>The whole website can be started in dev-mode by running <code>npm i</code> and     <code>npm start</code> in the <code>./website</code> directory. The website build can be tested     by running <code>npm run build</code>.</li> </ol> <p>If you are adding an example with additional dependencies:</p> <ol> <li>Create a 400x400 px image for the overview page and place it in <code>./website/static/images/examples/your-example-id.jpg</code></li> <li>Add the example to <code>./website/src/examples-sidebar.js</code> as an external link to a CodeSandbox based on the title of your new example folder in the <code>./examples</code> folder.</li> </ol>"}]}